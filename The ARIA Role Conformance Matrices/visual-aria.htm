<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title> The Visual ARIA Bookmarklet </title>
<meta name="Author" content="Bryan Garaventa">
<link rel="stylesheet" type="text/css" href="css/_global.css">
<script type="text/javascript">
var isVisualARIA = true;
</script>
<script type="text/javascript" src="js/jQuery.js"></script>
<script type="text/javascript" src="js/Acc.DC.API.js"></script>
<script type="text/javascript" src="js/setup.js"></script>
</head>
<body>
<div class="pageContainer">

<div class="menuLinks">
<div class="logo">
<a href="http://whatsock.com/">
<img title="WhatSock : Changing the world one step at a time" alt="WhatSock : Changing the world one step at a time" src="img/whatsock_logo.jpg" />
</a>
</div>
</div>

<div id="page-title" class="hd" tabindex="-1">
<h1>
<span>
The Visual ARIA Bookmarklet
</span>
</h1>
</div>

<div role="navigation" class="intro announce" id="ph"></div>

<div class="intro" id="bookmarklet">
<dl role="presentation">
<dt>
<a id="bookmarkletBtn" onclick="return false;" href="javascript:(function(){var a=document.createElement('script');a.type='text/javascript';a.src='https://gutterstar.bizland.com/whatsock/training/matrices/visual-aria/roles.js';document.head.appendChild(a)})()" role="button">
<span>
Visual ARIA Bookmarklet
</span>
</a>
</dt>
<dd>
Instructions: Right click the "Visual ARIA Bookmarklet" button, then choose Add to Favorites or Add to Bookmarks. The Visual ARIA Bookmarklet can then be run upon any webpage by choosing the bookmarklet from within your Favorites or Bookmarks menu.
</dd>
<dd>
Alternatively, the bookmarklet can be added manually within browsers such as Chrome and Safari, by activating New within the Bookmark Manager, then pasting the below code into the URL field.<br /><br />
<textarea readonly title="Visual ARIA Bookmarklet">javascript:(function(){var a=document.createElement('script');a.type='text/javascript';a.src='https://gutterstar.bizland.com/whatsock/training/matrices/visual-aria/roles.js';document.head.appendChild(a)})()</textarea>
</dd>
</dl>
</div>

<div class="cb" id="pgContent">
<div id="pg-intro">

<div class="intro heading">
<p>
Related resources:
</p>
<ul><li>
<a href="http://whatsock.com/training">The Accessibility Tree - A Training Guide for Advanced Web Development</a>
</li><li>
<a href="http://whatsock.com/training/matrices">The ARIA Role Conformance Matrices </a>
</li></ul>
<p>
Visual ARIA is a cascading logic program written using CSS, which allows any sighted person to physically see the use of ARIA upon any public website, including all landmark and region roles, structural roles, live regions, pseudo interactive constructs, and all interactive widget roles mapped within ARIA 1.1.
</p>
<p>
Moreover, Visual ARIA provides real-time visual feedback as interactive widgets are focused to and updated, and will also convey when widget roles are not being interacted with properly due to incorrect focus management or improper role usage.
</p>
<p>
Visual ARIA is meant to address the global problem that ARIA is an invisible technology, making it extremely difficult for mainstream sighted developers to understand and implement properly with consistent reliability.
</p>
<p>
For example, when developers who implement ARIA receive no direct input to validate their efforts during the process of development, and who have little to no understanding of how Assistive Technologies work, they have no way to assess the value of what they are doing, nor is there any way for them to learn from their mistakes at the same time. This is the primary reason why the vast majority of mainstream sighted developers still cannot understand the proper use of ARIA; because there is nothing for them to see.
</p>
<p>
Visual ARIA solves this problem by providing direct visual feedback for sighted engineers during the agile development process. The source code for Visual ARIA is included within the <a target="_blank" href="https://github.com/accdc/aria-matrices">ARIA Role Conformance Matrices</a> GitHub project as core mapping algorithms, which can be downloaded for offline usage or behind corporate firewalls.
</p>
<p>
Please file relevant bugs on <a target="_blank" href="https://github.com/accdc/aria-matrices">The ARIA Role Conformance Matrices GitHub project page</a> if issues are discovered.
</p>
<p>
Sincerely,
<a id="mlto" href="#" target="_blank">Bryan Garaventa</a>
</p>
</div>

<div id="target-audience" class="hd" tabindex="-1">
<h2>
<span>
Target Audience
</span>
</h2>
</div>

<div class="intro tal">
<ul><li>
Visual ARIA can be used within classrooms by educators to physically show sighted students what ARIA does and how it works, and how the improper use of ARIA causes accessibility issues when misapplied.
</li><li>
Sighted students can use Visual ARIA to evaluate their own projects as they learn accessible coding practices, with real-time feedback to identify their mistakes and coach them when necessary.
</li><li>
Online learning programs can incorporate Visual ARIA to provide real-time feedback as students build test widgets to practice through experience and repetition.
</li><li>
Sighted Quality Analysis teams can use Visual ARIA to reliably evaluate ARIA usage and related interactivity for all public and private services and products, without having to first understand or have experience using Assistive Technologies in advance.
</li><li>
Teams of sighted engineers can incorporate Visual ARIA within the development process to see how ARIA is being used within their projects, and whether ARIA is being used correctly according to spec when interacted with.
</li><li>
Any sighted person who is interested in ARIA can use Visual ARIA to see where and how ARIA is used on any website to better understand how Assistive Technology users are impacted by its use or misuse.
</li></ul>
</div>

<div id="how-it-works" class="hd" tabindex="-1">
<h2>
<span>
How It Works
</span>
</h2>
</div>

<div class="intro tal">
<p>
The bookmarklet script includes a small amount of JavaScript, which loads the Visual ARIA JavaScript setup file at:<br />
<a target="_blank" href="https://raw.githubusercontent.com/accdc/aria-matrices/master/The%20ARIA%20Role%20Conformance%20Matrices/visual-aria/roles.js">https://raw.githubusercontent.com/accdc/aria-matrices/master/The%20ARIA%20Role%20Conformance%20Matrices/visual-aria/roles.js</a>
</p>
<p>
This small JavaScript file then loads the <a target="_blank" href="https://raw.githubusercontent.com/accdc/aria-matrices/master/The%20ARIA%20Role%20Conformance%20Matrices/visual-aria/roles.css">roles.css</a> stylesheet, which comprises all of the Visual ARIA cascading logic functionality.
</p>
<p>
The JavaScript file then monitors the page for changes to ARIA roles and supporting attributes associated with HTML input and img elements, which is necessary since these elements don't support the use of the :before and :after CSS pseudo elements.
</p>
<p>
Since all of the processing power is handled using CSS, visual feedback by Visual ARIA is instantaneous, and should work correctly within any CSS3 compliant browser within any operating system on any desktop or mobile device.
</p>
<p>
Though the coaching advice within Visual ARIA is geared for desktop keyboard interactions, the ARIA spec compliance algorithms conveyed by Visual ARIA are applicable to both desktop and mobile platforms equally.
</p>
</div>

<div id="instructions-for-use" class="hd" tabindex="-1">
<h2>
<span>
Instructions for Use
</span>
</h2>
</div>

<div class="intro tal">
<p>
Visual ARIA is very simple to use.
</p>
<ol><li>
Navigate to the webpage that you wish to examine.
</li><li>
Activate the Visual ARIA Bookmarklet from your Favorites or Bookmarks menu, and wait for Visual ARIA to load.
<i>
The time for this may vary depending on the speed of your internet connection.
</i>
</li></ol>
<p>
You will then see various colored borders where ARIA roles are detected, and tooltips to convey their purpose and supporting attributes.
</p>
<p>
These borders and tooltips follow several distinct color schemes to identify the differences between static and interactive widget roles.
</p>
<p>
To view the Alternative Text Calculation for any form field, link, or simple interactive widget role, hover the mouse over the active element.
</p>
</div>

<div id="static-roles" class="hd" tabindex="-1">
<h3>
<span>
Static Roles
</span>
</h3>
</div>

<div class="intro tal">
<ul><li>
<span class="purpleTltp">
Purple border with purple tooltip: Identifies landmark and region roles.
</span>
</li><li>
<span class="blueTltp">
Blue border with blue tooltip: Identifies structural roles.
</span>
</li><li>
<span class="redTltp">
Red border with red tooltip: Identifies role usage errors within structural role usage.
</span>
</li></ul>
</div>

<div id="live-region-roles" class="hd" tabindex="-1">
<h3>
<span>
Live Region Roles
</span>
</h3>
</div>

<div class="intro tal">
<ul><li>
<span class="fuchsiaTltp">
Fuchsia border with fuchsia tooltip: Identifies live region roles and associated attributes.
</span>
</li></ul>
</div>

<div id="interactive-roles" class="hd" tabindex="-1">
<h3>
<span>
Interactive Roles
</span>
</h3>
</div>

<div class="intro tal">
<ul><li>
<span class="orangeTltp">
Orange border with orange tooltip: Identifies technically compliant interactive role usage. (Requires keyboard testing to validate functionality)
</span>
</li><li>
<span class="greenTltp">
Green border with green tooltip: Identifies technically compliant interactive role usage that matches the correct focus management for that role type.
</span>
</li><li>
<span class="redTltp">
Red border with red tooltip: Identifies role usage and focus management errors within interactive role usage.
</span>
</li></ul>
<p>
When interacting with keyboard accessible widget roles, the goal is to turn both the focus outline and border of the focused widget role <span class="greenTltp">green</span>. This conveys that focus management and ARIA widget role usage are correctly synchronized.
</p>
<p>
If however you see two different colored borders on the same widget role, such as <span class="orangeTltp">orange</span> and <span class="redTltp">red</span>, then focus management and ARIA widget role usage for this implementation are incorrect and not programmed according to spec.
</p>
</div>

<div id="alternative-text-calculation" class="hd" tabindex="-1">
<h2>
<span>
Alternative Text Calculation
</span>
</h2>
</div>

<div class="intro tal">
<p>
Visual ARIA will automatically calculate the Alternative Text Calculation for any form field, link, or simple ARIA interactive widget role, and display this information when the mouse is hovered over the element.
</p>
<p>
There are some important details about this feature that need to be explained however.
</p>
<p>
There are two properties that need to be understood within the Accessibility Tree, the Name, and the Description. The Name represents the calculated label text for the active element, and the Description represents supplementary information that can be used by Assistive Technologies to accompany the Name.
</p>
</div>

<div id="name-calculation" class="hd" tabindex="-1">
<h3>
<span>
Name Calculation
</span>
</h3>
</div>

<div class="intro tal">
<dl>
<dt>
aria-labelledby
</dt>
<dd>
(Caveats: Must not be included with aria-label, nor with the HTML label element with matching 'for' and 'id' attributes. Also, aria-labelledby cannot recursively reference other elements that include aria-labelledby.)
</dd>
<dt>
aria-label
</dt>
<dd>
(Caveats: Only if aria-labelledby is not set. If included within a container referenced via aria-labelledby, the HTML label element with matching 'for' and 'id' attributes, or aria-describedby, the value of aria-label will supersede any embedded content or additional aria-label attribute values; which will be ignored when setting the Accessible Name of the parent role.)
</dd>
<dt>
HTML label element with matching 'for' and 'id' attributes
</dt>
<dd>
(Caveats: Only if aria-labelledby or aria-label is not set; on HTML input and select elements only.)
</dd>
<dt>
HTML 'alt' attribute
</dt>
<dd>
(Caveats: Only if aria-labelledby or aria-label is not set; on HTML img elements only.)
</dd>
<dt>
HTML 'title' attribute
</dt>
<dd>
(Caveats: Only if aria-labelledby, aria-label, or 'alt' is not set; on HTML img elements only.)
</dd>
</dl>
</div>

<div id="description-calculation" class="hd" tabindex="-1">
<h3>
<span>
Description Calculation
</span>
</h3>
</div>

<div class="intro tal">
<dl>
<dt>
aria-describedby
</dt>
<dd>
(Caveats: Must not be included with the HTML 'title' attribute, which will be overwritten by aria-describedby.)
</dd>
<dt>
HTML 'title' attribute
</dt>
<dd>
(Caveats: Only when applied to active elements that are not HTML img elements. Must not be included with aria-describedby, which will overwrite the value of 'title' as the Description.)
</dd>
</dl>
</div>

<div id="important-details" class="hd" tabindex="-1">
<h3>
<span>
Important Details
</span>
</h3>
</div>

<div class="intro tal">
<p>
Any use of aria-hidden="true" or the CSS properties "display:none" or "visibility:hidden", will cancel the naming calculation for the referenced element and all elements within the subtree of that element.
</p>
<p>
Additionally, the Name and Description exposed by Visual ARIA strictly follows the <a href="http://www.w3.org/TR/accname-aam-1.1/" target="_blank">Alternative Text Calculation</a> for interactive elements, which may not exactly match what is represented by the Accessibility Tree within certain browsers, nor what is conveyed by Assistive Technologies.
</p>
<p>
The value in exposing this calculation however, is to identify current bugs within browsers that need to be reported to their venders when discovered using Object Inspector for example, as well as bugs with Assistive Technologies that need to be reported to AT venders. This will lead to better interoperability support in the future.
</p>
</div>

<div id="supported-active-element-types" class="hd" tabindex="-1">
<h3>
<span>
Supported Active Element Types
</span>
</h3>
</div>

<div class="intro tal">
<ul><li>
All HTML input, select, and button elements.
</li><li>
All HTML A elements that include an 'href' attribute.
</li><li>
All HTML5 progress elements.
</li><li>
All of the ARIA roles:
"button", "checkbox", "link", "searchbox", "scrollbar", "slider", "spinbutton", "switch", "textbox", "combobox", "option", "menuitem", "menuitemcheckbox", "menuitemradio", "radio", "tab", "treeitem"
</li></ul>
</div>

<div id="notes-and-limitations" class="hd" tabindex="-1">
<h2>
<span>
Notes and Limitations
</span>
</h2>
</div>

<div class="intro tal">
<p>
<b>
Since the HTML img, input, and progress elements cannot support the use of the :before and :after CSS pseudo elements, tooltip and border coloration may sometimes differ.
Additionally, when ARIA role usage is right aligned, the tooltip text may run on past the right border of the screen, which unfortunately cannot be helped at this time.
</b>
</p>
<p>
Please address any questions or support issues to the <a target="_blank" href="https://www.linkedin.com/grp/home?gid=4512178">Accessibility Innovators</a> LinkedIn group.
</p>
</div>

</div>
</div>

<div class="topLink">
<a href="#"><img src="img/up.png" title="Back to Top" alt="Back to Top" /></a>
</div>

<div class="gAd">
<script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<!-- WS-Right -->
<ins class="adsbygoogle"
     style="display:inline-block;width:120px;height:240px"
     data-ad-client="ca-pub-8533370891294613"
     data-ad-slot="6604167582"></ins>
<script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
</div>

<div class="copyright">
<span>
&copy;<script type="text/javascript">document.write(new Date().getFullYear());</script> WhatSock, LLC;
All rights reserved.
</span>
</div>

</div>
</body>
</html>